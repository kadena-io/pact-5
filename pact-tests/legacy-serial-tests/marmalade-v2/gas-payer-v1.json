{"module":{"imports":[],"name":{"namespace":null,"name":"gas-payer-v1"},"code":"(interface gas-payer-v1\n\n  (defcap GAS_PAYER:bool\n    ( user:string\n      limit:integer\n      price:decimal\n    )\n    @doc\n    \" Provide a capability indicating that declaring module supports \\\n    \\ gas payment for USER for gas LIMIT and PRICE. Functionality \\\n    \\ should require capability (coin.FUND_TX), and should validate \\\n    \\ the spend of (limit * price), possibly updating some database \\\n    \\ entry. \\\n    \\ Should compose capability required for 'create-gas-payer-guard'.\"\n    @model\n    [ (property (user != \"\"))\n      (property (limit > 0))\n      (property (price > 0.0))\n    ]\n  )\n\n  (defun create-gas-payer-guard:guard ()\n    @doc\n    \" Provide a guard suitable for controlling a coin account that can \\\n    \\ pay gas via GAS_PAYER mechanics. Generally this is accomplished \\\n    \\ by having GAS_PAYER compose an unparameterized, unmanaged capability \\\n    \\ that is required in this guard. Thus, if coin contract is able to \\\n    \\ successfully acquire GAS_PAYER, the composed 'anonymous' cap required \\\n    \\ here will be in scope, and gas buy will succeed.\"\n  )\n\n)\n","meta":{"model":[],"docs":null}},"refMap":{"create-gas-payer-guard":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[],"return":{"guard":null}},"defName":"create-gas-payer-guard","defBody":{"scope":{"list":[],"type":"*","i":{"d":[483,603,603],"c":"(defun create-gas-payer-guard:guard ()\n    @doc\n    \" Provide a guard suitable for controlling a coin account that can \\\n    \\ pay gas via GAS_PAYER mechanics. Generally this is accomplished \\\n    \\ by having GAS_PAYER compose an unparameterized, unmanaged capability \\\n    \\ that is required in this guard. Thus, if coin contract is able to \\\n    \\ successfully acquire GAS_PAYER, the composed 'anonymous' cap required \\\n    \\ here will be in scope, and gas buy will succeed.\"\n  )\n\n"}}},"module":{"namespace":null,"name":"gas-payer-v1"},"meta":{"model":[],"docs":" Provide a guard suitable for controlling a coin account that can  pay gas via GAS_PAYER mechanics. Generally this is accomplished  by having GAS_PAYER compose an unparameterized, unmanaged capability  that is required in this guard. Thus, if coin contract is able to  successfully acquire GAS_PAYER, the composed 'anonymous' cap required  here will be in scope, and gas buy will succeed."},"info":{"d":[483,603,603],"c":"(defun create-gas-payer-guard:guard ()\n    @doc\n    \" Provide a guard suitable for controlling a coin account that can \\\n    \\ pay gas via GAS_PAYER mechanics. Generally this is accomplished \\\n    \\ by having GAS_PAYER compose an unparameterized, unmanaged capability \\\n    \\ that is required in this guard. Thus, if coin contract is able to \\\n    \\ successfully acquire GAS_PAYER, the composed 'anonymous' cap required \\\n    \\ here will be in scope, and gas buy will succeed.\"\n  )\n\n"}}},"GAS_PAYER":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"user","type":"string","info":{"d":[4,56,56],"c":"user"}},{"name":"limit","type":"integer","info":{"d":[5,74,74],"c":"limit"}},{"name":"price","type":"decimal","info":{"d":[5,94,94],"c":"price"}}],"return":"bool"},"defName":"GAS_PAYER","defBody":{"scope":{"list":[],"type":"*","i":{"d":[576,27,27],"c":"(defcap GAS_PAYER:bool\n    ( user:string\n      limit:integer\n      price:decimal\n    )\n    @doc\n    \" Provide a capability indicating that declaring module supports \\\n    \\ gas payment for USER for gas LIMIT and PRICE. Functionality \\\n    \\ should require capability (coin.FUND_TX), and should validate \\\n    \\ the spend of (limit * price), possibly updating some database \\\n    \\ entry. \\\n    \\ Should compose capability required for 'create-gas-payer-guard'.\"\n    @model\n    [ (property (user != \"\"))\n      (property (limit > 0))\n      (property (price > 0.0))\n    ]\n  )\n\n  "}}},"module":{"namespace":null,"name":"gas-payer-v1"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,507,507],"c":"property "}},{"list":[{"atom":"user","q":[],"i":{"d":[5,517,517],"c":"user "}},{"atom":"!=","q":[],"i":{"d":[3,522,522],"c":"!= "}},{"i":{"d":[2,525,525],"c":"\"\""},"lit":""}],"d":"()","i":{"d":[12,516,516],"c":"(user != \"\")"}}],"d":"()","i":{"d":[30,506,506],"c":"(property (user != \"\"))\n      "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,537,537],"c":"property "}},{"list":[{"atom":"limit","q":[],"i":{"d":[6,547,547],"c":"limit "}},{"atom":">","q":[],"i":{"d":[2,553,553],"c":"> "}},{"i":{"d":[1,555,555],"c":"0"},"lit":{"int":0}}],"d":"()","i":{"d":[11,546,546],"c":"(limit > 0)"}}],"d":"()","i":{"d":[29,536,536],"c":"(property (limit > 0))\n      "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,566,566],"c":"property "}},{"list":[{"atom":"price","q":[],"i":{"d":[6,576,576],"c":"price "}},{"atom":">","q":[],"i":{"d":[2,582,582],"c":"> "}},{"i":{"d":[3,584,584],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[13,575,575],"c":"(price > 0.0)"}}],"d":"()","i":{"d":[29,565,565],"c":"(property (price > 0.0))\n    "}}],"docs":" Provide a capability indicating that declaring module supports  gas payment for USER for gas LIMIT and PRICE. Functionality  should require capability (coin.FUND_TX), and should validate  the spend of (limit * price), possibly updating some database  entry.  Should compose capability required for 'create-gas-payer-guard'."},"info":{"d":[576,27,27],"c":"(defcap GAS_PAYER:bool\n    ( user:string\n      limit:integer\n      price:decimal\n    )\n    @doc\n    \" Provide a capability indicating that declaring module supports \\\n    \\ gas payment for USER for gas LIMIT and PRICE. Functionality \\\n    \\ should require capability (coin.FUND_TX), and should validate \\\n    \\ the spend of (limit * price), possibly updating some database \\\n    \\ entry. \\\n    \\ Should compose capability required for 'create-gas-payer-guard'.\"\n    @model\n    [ (property (user != \"\"))\n      (property (limit > 0))\n      (property (price > 0.0))\n    ]\n  )\n\n  "}}}}}
