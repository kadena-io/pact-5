{"module":{"imports":[],"name":{"namespace":"kip","name":"poly-fungible-v3"},"code":"(interface poly-fungible-v3\n\n  (defschema account-details\n    @doc\n      \" Account details: token ID, account name, balance, and guard.\"\n    @model\n      [ (invariant (!= id \"\"))\n        (invariant (!= account \"\"))\n        (invariant (>= balance 0.0))\n      ]\n    id:string\n    account:string\n    balance:decimal\n    guard:guard)\n\n  (defschema sender-balance-change\n    @doc \"For use in RECONCILE events\"\n    account:string\n    previous:decimal\n    current:decimal\n  )\n\n  (defschema receiver-balance-change\n    @doc \"For use in RECONCILE events\"\n    account:string\n    previous:decimal\n    current:decimal\n  )\n\n  (defcap TRANSFER:bool\n    ( id:string\n      sender:string\n      receiver:string\n      amount:decimal\n    )\n    @doc\n      \" Manage transferring AMOUNT of ID from SENDER to RECEIVER. \\\n      \\ As event, also used to notify burn (with \\\"\\\" RECEIVER) \\\n      \\ and create (with \\\"\\\" SENDER).\"\n    @managed amount TRANSFER-mgr\n  )\n\n  (defcap XTRANSFER:bool\n    ( id:string\n      sender:string\n      receiver:string\n      target-chain:string\n      amount:decimal\n    )\n    \" Manage cross-chain transferring AMOUNT of ID from SENDER to RECEIVER \\\n    \\ on TARGET-CHAIN.\"\n    @managed amount TRANSFER-mgr\n  )\n\n  (defun TRANSFER-mgr:decimal\n    ( managed:decimal\n      requested:decimal\n    )\n    @doc \" Manages TRANSFER cap AMOUNT where MANAGED is the installed quantity \\\n         \\ and REQUESTED is the quantity attempting to be granted.\"\n  )\n\n  (defcap SUPPLY:bool (id:string supply:decimal)\n    @doc \" Emitted when SUPPLY is updated, if supported.\"\n    @event\n  )\n\n  (defcap ACCOUNT_GUARD:bool (id:string account:string guard:guard)\n    @doc \" Emitted when ACCOUNT guard is updated.\"\n    @event\n  )\n\n  (defcap RECONCILE:bool\n    ( token-id:string\n      amount:decimal\n      sender:object{sender-balance-change}\n      receiver:object{receiver-balance-change}\n    )\n    @doc \" For accounting via events. \\\n         \\ sender = {account: '', previous: 0.0, current: 0.0} for mint \\\n         \\ receiver = {account: '', previous: 0.0, current: 0.0} for burn\"\n    @event\n  )\n\n  (defun precision:integer (id:string)\n    @doc\n      \" Return maximum decimal precision for ID.\"\n  )\n\n  (defun enforce-unit:bool\n    ( id:string\n      amount:decimal\n    )\n    @doc\n      \" Enforce that AMOUNT meets minimum precision allowed for ID.\"\n  )\n\n  (defun mint:bool\n    ( id:string\n      account:string\n      guard:guard\n      amount:decimal\n    )\n    @doc\n      \" Mint AMOUNT of ID to ACCOUNT with GUARD.\"\n    @model\n      [ (property (!= id \"\"))\n        (property (!= account \"\"))\n        (property (>= amount 0.0))\n      ]\n  )\n\n  (defun burn:bool\n    ( id:string\n      account:string\n      amount:decimal\n    )\n    @doc\n      \" Burn AMOUNT of ID from ACCOUNT.\"\n    @model\n      [ (property (!= id \"\"))\n        (property (!= account \"\"))\n        (property (>= amount 0.0))\n      ]\n  )\n\n  (defun create-account:bool\n    ( id:string\n      account:string\n      guard:guard\n    )\n    @doc\n      \" Create ACCOUNT for ID with 0.0 balance, with GUARD controlling access.\"\n    @model\n      [ (property (!= id \"\"))\n        (property (!= account \"\"))\n      ]\n  )\n\n  (defun get-balance:decimal\n    ( id:string\n      account:string\n    )\n    @doc\n      \" Get balance of ID for ACCOUNT. Fails if account does not exist.\"\n  )\n\n  (defun details:object{account-details}\n    ( id:string\n      account:string\n    )\n    @doc\n      \" Get details of ACCOUNT under ID. Fails if account does not exist.\"\n  )\n\n  (defun transfer:bool\n    ( id:string\n      sender:string\n      receiver:string\n      amount:decimal\n    )\n    @doc\n      \" Transfer AMOUNT of ID between accounts SENDER and RECEIVER. \\\n      \\ Fails if SENDER does not exist. Managed by TRANSFER.\"\n    @model\n      [ (property (> amount 0.0))\n        (property (!= id \"\"))\n        (property (!= sender \"\"))\n        (property (!= receiver \"\"))\n        (property (!= sender receiver))\n      ]\n  )\n\n  (defun transfer-create:bool\n    ( id:string\n      sender:string\n      receiver:string\n      receiver-guard:guard\n      amount:decimal\n    )\n    @doc\n      \" Transfer AMOUNT of ID between accounts SENDER and RECEIVER. \\\n      \\ If RECEIVER exists, RECEIVER-GUARD must match existing guard; \\\n      \\ if RECEIVER does not exist, account is created. \\\n      \\ Managed by TRANSFER.\"\n    @model\n      [ (property (> amount 0.0))\n        (property (!= id \"\"))\n        (property (!= sender \"\"))\n        (property (!= receiver \"\"))\n        (property (!= sender receiver))\n      ]\n  )\n\n  (defpact transfer-crosschain:bool\n    ( id:string\n      sender:string\n      receiver:string\n      receiver-guard:guard\n      target-chain:string\n      amount:decimal\n    )\n    @doc\n      \" Transfer AMOUNT of ID between accounts SENDER on source chain \\\n      \\ and RECEIVER on TARGET-CHAIN. If RECEIVER exists, RECEIVER-GUARD \\\n      \\ must match existing guard. If RECEIVER does not exist, account is created.\"\n    @model\n      [ (property (> amount 0.0))\n        (property (!= id \"\"))\n        (property (!= sender \"\"))\n        (property (!= receiver \"\"))\n        (property (!= target-chain \"\"))\n      ]\n  )\n\n  (defun total-supply:decimal (id:string)\n    @doc\n      \" Give total available quantity of ID. If not supported, return 0.\"\n  )\n\n  (defun get-uri:string (id:string)\n    @doc\n      \" Give uri for ID.\"\n  )\n\n  ;;\n  ;; Sale API\n  ;;\n\n  (defcap SALE:bool\n    (id:string seller:string amount:decimal timeout:integer sale-id:string)\n    @doc \"Wrapper cap/event of SALE of token ID by SELLER of AMOUNT until TIMEOUT block height.\"\n    @event\n  )\n\n  (defpact sale:string\n    ( id:string\n      seller:string\n      amount:decimal\n      timeout:integer\n    )\n    @doc \" Offer->buy escrow pact of AMOUNT of token ID by SELLER with TIMEOUT in blocks. \\\n         \\ Step 1 is offer with withdraw rollback after timeout. \\\n         \\ Step 2 is buy, which completes using 'buyer' and 'buyer-guard' payload values.\"\n  )\n\n)\n","meta":{"model":[],"docs":null}},"refMap":{"enforce-unit":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"id","type":"string","info":null},{"name":"amount","type":"decimal","info":null}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[],"type":"*","i":null}},"module":{"namespace":"kip","name":"poly-fungible-v3"},"meta":{"model":[],"docs":" Enforce that AMOUNT meets minimum precision allowed for ID."},"info":null}},"create-account":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"id","type":"string","info":null},{"name":"account","type":"string","info":null},{"name":"guard","type":{"guard":null},"info":null}],"return":"bool"},"defName":"create-account","defBody":{"scope":{"list":[],"type":"*","i":null}},"module":{"namespace":"kip","name":"poly-fungible-v3"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":null},{"list":[{"atom":"!=","q":[],"i":null},{"atom":"id","q":[],"i":null},{"i":null,"lit":""}],"d":"()","i":null}],"d":"()","i":null},{"list":[{"atom":"property","q":[],"i":null},{"list":[{"atom":"!=","q":[],"i":null},{"atom":"account","q":[],"i":null},{"i":null,"lit":""}],"d":"()","i":null}],"d":"()","i":null}],"docs":" Create ACCOUNT for ID with 0.0 balance, with GUARD controlling access."},"info":null}},"SUPPLY":{"ref":{"defType":"Defcap","defMeta":"event","funType":{"args":[{"name":"id","type":"string","info":null},{"name":"supply","type":"decimal","info":null}],"return":"bool"},"defName":"SUPPLY","defBody":{"scope":{"list":[],"type":"*","i":null}},"module":{"namespace":"kip","name":"poly-fungible-v3"},"meta":{"model":[],"docs":" Emitted when SUPPLY is updated, if supported."},"info":null}},"ACCOUNT_GUARD":{"ref":{"defType":"Defcap","defMeta":"event","funType":{"args":[{"name":"id","type":"string","info":null},{"name":"account","type":"string","info":null},{"name":"guard","type":{"guard":null},"info":null}],"return":"bool"},"defName":"ACCOUNT_GUARD","defBody":{"scope":{"list":[],"type":"*","i":null}},"module":{"namespace":"kip","name":"poly-fungible-v3"},"meta":{"model":[],"docs":" Emitted when ACCOUNT guard is updated."},"info":null}},"burn":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"id","type":"string","info":null},{"name":"account","type":"string","info":null},{"name":"amount","type":"decimal","info":null}],"return":"bool"},"defName":"burn","defBody":{"scope":{"list":[],"type":"*","i":null}},"module":{"namespace":"kip","name":"poly-fungible-v3"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":null},{"list":[{"atom":"!=","q":[],"i":null},{"atom":"id","q":[],"i":null},{"i":null,"lit":""}],"d":"()","i":null}],"d":"()","i":null},{"list":[{"atom":"property","q":[],"i":null},{"list":[{"atom":"!=","q":[],"i":null},{"atom":"account","q":[],"i":null},{"i":null,"lit":""}],"d":"()","i":null}],"d":"()","i":null},{"list":[{"atom":"property","q":[],"i":null},{"list":[{"atom":">=","q":[],"i":null},{"atom":"amount","q":[],"i":null},{"i":null,"lit":0}],"d":"()","i":null}],"d":"()","i":null}],"docs":" Burn AMOUNT of ID from ACCOUNT."},"info":null}},"XTRANSFER":{"ref":{"defType":"Defcap","defMeta":{"managedParam":"amount","managerFun":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"managed","type":"decimal","info":null},{"name":"requested","type":"decimal","info":null}],"return":"decimal"},"defName":"TRANSFER-mgr","defBody":{"scope":{"list":[],"type":"*","i":null}},"module":{"namespace":"kip","name":"poly-fungible-v3"},"meta":{"model":[],"docs":" Manages TRANSFER cap AMOUNT where MANAGED is the installed quantity  and REQUESTED is the quantity attempting to be granted."},"info":null}},"i":null}},"funType":{"args":[{"name":"id","type":"string","info":null},{"name":"sender","type":"string","info":null},{"name":"receiver","type":"string","info":null},{"name":"target-chain","type":"string","info":null},{"name":"amount","type":"decimal","info":null}],"return":"bool"},"defName":"XTRANSFER","defBody":{"scope":{"list":[],"type":"*","i":null}},"module":{"namespace":"kip","name":"poly-fungible-v3"},"meta":{"model":[],"docs":" Manage cross-chain transferring AMOUNT of ID from SENDER to RECEIVER  on TARGET-CHAIN."},"info":null}},"precision":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"id","type":"string","info":null}],"return":"integer"},"defName":"precision","defBody":{"scope":{"list":[],"type":"*","i":null}},"module":{"namespace":"kip","name":"poly-fungible-v3"},"meta":{"model":[],"docs":" Return maximum decimal precision for ID."},"info":null}},"RECONCILE":{"ref":{"defType":"Defcap","defMeta":"event","funType":{"args":[{"name":"token-id","type":"string","info":null},{"name":"amount","type":"decimal","info":null},{"name":"sender","type":{"schema":"object","type":{"var":{"ref":{"modname":{"namespace":"kip","name":"poly-fungible-v3"},"name":"sender-balance-change","meta":{"model":[],"docs":"For use in RECONCILE events"},"i":null,"fields":[{"name":"account","type":"string","info":null},{"name":"previous","type":"decimal","info":null},{"name":"current","type":"decimal","info":null}]}},"i":null},"partial":"full"},"info":null},{"name":"receiver","type":{"schema":"object","type":{"var":{"ref":{"modname":{"namespace":"kip","name":"poly-fungible-v3"},"name":"receiver-balance-change","meta":{"model":[],"docs":"For use in RECONCILE events"},"i":null,"fields":[{"name":"account","type":"string","info":null},{"name":"previous","type":"decimal","info":null},{"name":"current","type":"decimal","info":null}]}},"i":null},"partial":"full"},"info":null}],"return":"bool"},"defName":"RECONCILE","defBody":{"scope":{"list":[],"type":"*","i":null}},"module":{"namespace":"kip","name":"poly-fungible-v3"},"meta":{"model":[],"docs":" For accounting via events.  sender = {account: '', previous: 0.0, current: 0.0} for mint  receiver = {account: '', previous: 0.0, current: 0.0} for burn"},"info":null}},"total-supply":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"id","type":"string","info":null}],"return":"decimal"},"defName":"total-supply","defBody":{"scope":{"list":[],"type":"*","i":null}},"module":{"namespace":"kip","name":"poly-fungible-v3"},"meta":{"model":[],"docs":" Give total available quantity of ID. If not supported, return 0."},"info":null}},"transfer-create":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"id","type":"string","info":null},{"name":"sender","type":"string","info":null},{"name":"receiver","type":"string","info":null},{"name":"receiver-guard","type":{"guard":null},"info":null},{"name":"amount","type":"decimal","info":null}],"return":"bool"},"defName":"transfer-create","defBody":{"scope":{"list":[],"type":"*","i":null}},"module":{"namespace":"kip","name":"poly-fungible-v3"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":null},{"list":[{"atom":">","q":[],"i":null},{"atom":"amount","q":[],"i":null},{"i":null,"lit":0}],"d":"()","i":null}],"d":"()","i":null},{"list":[{"atom":"property","q":[],"i":null},{"list":[{"atom":"!=","q":[],"i":null},{"atom":"id","q":[],"i":null},{"i":null,"lit":""}],"d":"()","i":null}],"d":"()","i":null},{"list":[{"atom":"property","q":[],"i":null},{"list":[{"atom":"!=","q":[],"i":null},{"atom":"sender","q":[],"i":null},{"i":null,"lit":""}],"d":"()","i":null}],"d":"()","i":null},{"list":[{"atom":"property","q":[],"i":null},{"list":[{"atom":"!=","q":[],"i":null},{"atom":"receiver","q":[],"i":null},{"i":null,"lit":""}],"d":"()","i":null}],"d":"()","i":null},{"list":[{"atom":"property","q":[],"i":null},{"list":[{"atom":"!=","q":[],"i":null},{"atom":"sender","q":[],"i":null},{"atom":"receiver","q":[],"i":null}],"d":"()","i":null}],"d":"()","i":null}],"docs":" Transfer AMOUNT of ID between accounts SENDER and RECEIVER.  If RECEIVER exists, RECEIVER-GUARD must match existing guard;  if RECEIVER does not exist, account is created.  Managed by TRANSFER."},"info":null}},"details":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"id","type":"string","info":null},{"name":"account","type":"string","info":null}],"return":{"schema":"object","type":{"var":{"ref":{"modname":{"namespace":"kip","name":"poly-fungible-v3"},"name":"account-details","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":null},{"list":[{"atom":"!=","q":[],"i":null},{"atom":"id","q":[],"i":null},{"i":null,"lit":""}],"d":"()","i":null}],"d":"()","i":null},{"list":[{"atom":"invariant","q":[],"i":null},{"list":[{"atom":"!=","q":[],"i":null},{"atom":"account","q":[],"i":null},{"i":null,"lit":""}],"d":"()","i":null}],"d":"()","i":null},{"list":[{"atom":"invariant","q":[],"i":null},{"list":[{"atom":">=","q":[],"i":null},{"atom":"balance","q":[],"i":null},{"i":null,"lit":0}],"d":"()","i":null}],"d":"()","i":null}],"docs":" Account details: token ID, account name, balance, and guard."},"i":null,"fields":[{"name":"id","type":"string","info":null},{"name":"account","type":"string","info":null},{"name":"balance","type":"decimal","info":null},{"name":"guard","type":{"guard":null},"info":null}]}},"i":null},"partial":"full"}},"defName":"details","defBody":{"scope":{"list":[],"type":"*","i":null}},"module":{"namespace":"kip","name":"poly-fungible-v3"},"meta":{"model":[],"docs":" Get details of ACCOUNT under ID. Fails if account does not exist."},"info":null}},"get-balance":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"id","type":"string","info":null},{"name":"account","type":"string","info":null}],"return":"decimal"},"defName":"get-balance","defBody":{"scope":{"list":[],"type":"*","i":null}},"module":{"namespace":"kip","name":"poly-fungible-v3"},"meta":{"model":[],"docs":" Get balance of ID for ACCOUNT. Fails if account does not exist."},"info":null}},"transfer-crosschain":{"ref":{"defType":"Defpact","defMeta":null,"funType":{"args":[{"name":"id","type":"string","info":null},{"name":"sender","type":"string","info":null},{"name":"receiver","type":"string","info":null},{"name":"receiver-guard","type":{"guard":null},"info":null},{"name":"target-chain","type":"string","info":null},{"name":"amount","type":"decimal","info":null}],"return":"bool"},"defName":"transfer-crosschain","defBody":{"scope":{"list":[],"type":"*","i":null}},"module":{"namespace":"kip","name":"poly-fungible-v3"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":null},{"list":[{"atom":">","q":[],"i":null},{"atom":"amount","q":[],"i":null},{"i":null,"lit":0}],"d":"()","i":null}],"d":"()","i":null},{"list":[{"atom":"property","q":[],"i":null},{"list":[{"atom":"!=","q":[],"i":null},{"atom":"id","q":[],"i":null},{"i":null,"lit":""}],"d":"()","i":null}],"d":"()","i":null},{"list":[{"atom":"property","q":[],"i":null},{"list":[{"atom":"!=","q":[],"i":null},{"atom":"sender","q":[],"i":null},{"i":null,"lit":""}],"d":"()","i":null}],"d":"()","i":null},{"list":[{"atom":"property","q":[],"i":null},{"list":[{"atom":"!=","q":[],"i":null},{"atom":"receiver","q":[],"i":null},{"i":null,"lit":""}],"d":"()","i":null}],"d":"()","i":null},{"list":[{"atom":"property","q":[],"i":null},{"list":[{"atom":"!=","q":[],"i":null},{"atom":"target-chain","q":[],"i":null},{"i":null,"lit":""}],"d":"()","i":null}],"d":"()","i":null}],"docs":" Transfer AMOUNT of ID between accounts SENDER on source chain  and RECEIVER on TARGET-CHAIN. If RECEIVER exists, RECEIVER-GUARD  must match existing guard. If RECEIVER does not exist, account is created."},"info":null}},"get-uri":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"id","type":"string","info":null}],"return":"string"},"defName":"get-uri","defBody":{"scope":{"list":[],"type":"*","i":null}},"module":{"namespace":"kip","name":"poly-fungible-v3"},"meta":{"model":[],"docs":" Give uri for ID."},"info":null}},"sale":{"ref":{"defType":"Defpact","defMeta":null,"funType":{"args":[{"name":"id","type":"string","info":null},{"name":"seller","type":"string","info":null},{"name":"amount","type":"decimal","info":null},{"name":"timeout","type":"integer","info":null}],"return":"string"},"defName":"sale","defBody":{"scope":{"list":[],"type":"*","i":null}},"module":{"namespace":"kip","name":"poly-fungible-v3"},"meta":{"model":[],"docs":" Offer->buy escrow pact of AMOUNT of token ID by SELLER with TIMEOUT in blocks.  Step 1 is offer with withdraw rollback after timeout.  Step 2 is buy, which completes using 'buyer' and 'buyer-guard' payload values."},"info":null}},"TRANSFER":{"ref":{"defType":"Defcap","defMeta":{"managedParam":"amount","managerFun":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"managed","type":"decimal","info":null},{"name":"requested","type":"decimal","info":null}],"return":"decimal"},"defName":"TRANSFER-mgr","defBody":{"scope":{"list":[],"type":"*","i":null}},"module":{"namespace":"kip","name":"poly-fungible-v3"},"meta":{"model":[],"docs":" Manages TRANSFER cap AMOUNT where MANAGED is the installed quantity  and REQUESTED is the quantity attempting to be granted."},"info":null}},"i":null}},"funType":{"args":[{"name":"id","type":"string","info":null},{"name":"sender","type":"string","info":null},{"name":"receiver","type":"string","info":null},{"name":"amount","type":"decimal","info":null}],"return":"bool"},"defName":"TRANSFER","defBody":{"scope":{"list":[],"type":"*","i":null}},"module":{"namespace":"kip","name":"poly-fungible-v3"},"meta":{"model":[],"docs":" Manage transferring AMOUNT of ID from SENDER to RECEIVER.  As event, also used to notify burn (with \"\" RECEIVER)  and create (with \"\" SENDER)."},"info":null}},"transfer":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"id","type":"string","info":null},{"name":"sender","type":"string","info":null},{"name":"receiver","type":"string","info":null},{"name":"amount","type":"decimal","info":null}],"return":"bool"},"defName":"transfer","defBody":{"scope":{"list":[],"type":"*","i":null}},"module":{"namespace":"kip","name":"poly-fungible-v3"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":null},{"list":[{"atom":">","q":[],"i":null},{"atom":"amount","q":[],"i":null},{"i":null,"lit":0}],"d":"()","i":null}],"d":"()","i":null},{"list":[{"atom":"property","q":[],"i":null},{"list":[{"atom":"!=","q":[],"i":null},{"atom":"id","q":[],"i":null},{"i":null,"lit":""}],"d":"()","i":null}],"d":"()","i":null},{"list":[{"atom":"property","q":[],"i":null},{"list":[{"atom":"!=","q":[],"i":null},{"atom":"sender","q":[],"i":null},{"i":null,"lit":""}],"d":"()","i":null}],"d":"()","i":null},{"list":[{"atom":"property","q":[],"i":null},{"list":[{"atom":"!=","q":[],"i":null},{"atom":"receiver","q":[],"i":null},{"i":null,"lit":""}],"d":"()","i":null}],"d":"()","i":null},{"list":[{"atom":"property","q":[],"i":null},{"list":[{"atom":"!=","q":[],"i":null},{"atom":"sender","q":[],"i":null},{"atom":"receiver","q":[],"i":null}],"d":"()","i":null}],"d":"()","i":null}],"docs":" Transfer AMOUNT of ID between accounts SENDER and RECEIVER.  Fails if SENDER does not exist. Managed by TRANSFER."},"info":null}},"SALE":{"ref":{"defType":"Defcap","defMeta":"event","funType":{"args":[{"name":"id","type":"string","info":null},{"name":"seller","type":"string","info":null},{"name":"amount","type":"decimal","info":null},{"name":"timeout","type":"integer","info":null},{"name":"sale-id","type":"string","info":null}],"return":"bool"},"defName":"SALE","defBody":{"scope":{"list":[],"type":"*","i":null}},"module":{"namespace":"kip","name":"poly-fungible-v3"},"meta":{"model":[],"docs":"Wrapper cap/event of SALE of token ID by SELLER of AMOUNT until TIMEOUT block height."},"info":null}},"sender-balance-change":{"ref":{"modname":{"namespace":"kip","name":"poly-fungible-v3"},"name":"sender-balance-change","meta":{"model":[],"docs":"For use in RECONCILE events"},"i":null,"fields":[{"name":"account","type":"string","info":null},{"name":"previous","type":"decimal","info":null},{"name":"current","type":"decimal","info":null}]}},"mint":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"id","type":"string","info":null},{"name":"account","type":"string","info":null},{"name":"guard","type":{"guard":null},"info":null},{"name":"amount","type":"decimal","info":null}],"return":"bool"},"defName":"mint","defBody":{"scope":{"list":[],"type":"*","i":null}},"module":{"namespace":"kip","name":"poly-fungible-v3"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":null},{"list":[{"atom":"!=","q":[],"i":null},{"atom":"id","q":[],"i":null},{"i":null,"lit":""}],"d":"()","i":null}],"d":"()","i":null},{"list":[{"atom":"property","q":[],"i":null},{"list":[{"atom":"!=","q":[],"i":null},{"atom":"account","q":[],"i":null},{"i":null,"lit":""}],"d":"()","i":null}],"d":"()","i":null},{"list":[{"atom":"property","q":[],"i":null},{"list":[{"atom":">=","q":[],"i":null},{"atom":"amount","q":[],"i":null},{"i":null,"lit":0}],"d":"()","i":null}],"d":"()","i":null}],"docs":" Mint AMOUNT of ID to ACCOUNT with GUARD."},"info":null}},"TRANSFER-mgr":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"managed","type":"decimal","info":null},{"name":"requested","type":"decimal","info":null}],"return":"decimal"},"defName":"TRANSFER-mgr","defBody":{"scope":{"list":[],"type":"*","i":null}},"module":{"namespace":"kip","name":"poly-fungible-v3"},"meta":{"model":[],"docs":" Manages TRANSFER cap AMOUNT where MANAGED is the installed quantity  and REQUESTED is the quantity attempting to be granted."},"info":null}},"account-details":{"ref":{"modname":{"namespace":"kip","name":"poly-fungible-v3"},"name":"account-details","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":null},{"list":[{"atom":"!=","q":[],"i":null},{"atom":"id","q":[],"i":null},{"i":null,"lit":""}],"d":"()","i":null}],"d":"()","i":null},{"list":[{"atom":"invariant","q":[],"i":null},{"list":[{"atom":"!=","q":[],"i":null},{"atom":"account","q":[],"i":null},{"i":null,"lit":""}],"d":"()","i":null}],"d":"()","i":null},{"list":[{"atom":"invariant","q":[],"i":null},{"list":[{"atom":">=","q":[],"i":null},{"atom":"balance","q":[],"i":null},{"i":null,"lit":0}],"d":"()","i":null}],"d":"()","i":null}],"docs":" Account details: token ID, account name, balance, and guard."},"i":null,"fields":[{"name":"id","type":"string","info":null},{"name":"account","type":"string","info":null},{"name":"balance","type":"decimal","info":null},{"name":"guard","type":{"guard":null},"info":null}]}},"receiver-balance-change":{"ref":{"modname":{"namespace":"kip","name":"poly-fungible-v3"},"name":"receiver-balance-change","meta":{"model":[],"docs":"For use in RECONCILE events"},"i":null,"fields":[{"name":"account","type":"string","info":null},{"name":"previous","type":"decimal","info":null},{"name":"current","type":"decimal","info":null}]}}}}
