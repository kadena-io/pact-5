
;;
;; toplevel.repl: test that toplevel-only builtins
;; fail in module context but work in non-module context.
;; MAINTENANCE NOTE: for every built-in created using "setTopLevelOnly",
;; please add both "success" and "failure" cases below.
;;

(begin-tx)

;; ease restrictions requiring namespaced keysets
;; define-keyset success case
(define-keyset 'k (sig-keyset))
(env-enable-repl-natives true)
(module toplevel 'k
  (defschema tl a:integer)

  (deftable atable:{tl})
  (deftable atable-bad:{tl})

  (defun bad-create-table (tbl) (create-table tbl))
  (defun bad-describe-table (tbl) (describe-table tbl))
  (defun bad-describe-keyset (k) (describe-keyset k))
  (defun bad-describe-module (m) (describe-module m))
  (defun bad-define-keyset (n k) (define-keyset n k))
  ;  (defun bad-list-modules () (list-modules))
  (defun bad-enforce-pact-version (v) (enforce-pact-version v))
  )

;; Success cases

(create-table atable)
(commit-tx)
(describe-table toplevel.atable)
(describe-keyset 'k)
(describe-module "toplevel")
(pact-version)
;  (list-modules)
(enforce-pact-version (pact-version))
(use toplevel)

;; failure cases

(expect-failure "bad-create-table" (bad-create-table atable-bad))
(expect-failure "bad-describe-table" (bad-describe-table atable))
(expect-failure "bad-describe-keyset" (bad-describe-keyset 'k))
(expect-failure "bad-describe-module" (bad-describe-module "toplevel"))
(expect-failure "bad-define-keyset" (bad-define-keyset 'j (sig-keyset)))
;  (expect-failure "bad-list-modules" (bad-list-modules))

(module repl-natives 'k
  (defun f () (env-sigs [{'key: "bob",'caps: []}])))
(expect
 "env-sigs in module"
 "Setting transaction signatures/caps"
 (f))

(env-data { 'b: "hello"})
(expect
 "env-data takes immediate, scoped effect"
 3
 (let ((a 1))
   (env-data { 'b: 2 }) ;; normally would not be in effect until next top-level
   (+ a (read-integer "b"))))
