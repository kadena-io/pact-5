
;;load policy manager, ledger
(load "../../../pact/marmalade.repl")

(begin-tx "load timed mint policy")
  (env-data {
    "ns": "marmalade-examples"
  , "timed-mint-policy": ["timed-mint-policy"]
  , "upgrade": false}
  )
  (env-sigs [
    { 'key: 'timed-mint-policy
     ,'caps: []
  }])

  (ns.write-registry (read-msg 'ns) (read-keyset 'timed-mint-policy) true)
  (define-namespace
    (read-msg 'ns)
    (read-keyset 'timed-mint-policy) (read-keyset 'timed-mint-policy)
  )

  (namespace (read-msg 'ns))

  (define-keyset (+ (read-msg 'ns) ".timed-mint-policy") (read-keyset 'timed-mint-policy))
  
  (load "timed-mint-policy-v1.pact")
  (typecheck "marmalade-examples.timed-mint-policy-v1")
(commit-tx)


(begin-tx "create timed mint token")

  (use marmalade-v2.ledger)
  (use marmalade-v2.policy-manager)
  (use marmalade-examples.timed-mint-policy-v1)
  (use marmalade-v2.util-v1)
  (use mini-guard-utils)
  (env-chain-data {"block-time": (time "2023-07-08T12:00:00Z")})

  ; validate start date
  (env-data {
    "token-id": (create-token-id { 'uri: "timed-mint-policy-v1-0", 'precision: 0, 'policies: [marmalade-examples.timed-mint-policy-v1] } ALWAYS-TRUE),
    "timed_mint_spec": {
        'max-supply: 0.0,
        'mint-start-time: (to-timestamp (time "2023-07-06T12:00:00Z")),
        'mint-end-time: (to-timestamp (time "2023-07-10T12:00:00Z")) } } )

  (expect-failure "Fail if start date is in the past"
      "Mint start time must be in the future"
      (create-token (read-msg 'token-id) 0 "timed-mint-policy-v1-0" [marmalade-examples.timed-mint-policy-v1] ALWAYS-TRUE))

  ; validate end date
  (env-data {
    "token-id": (create-token-id { 'uri: "timed-mint-policy-v1-0", 'precision: 0, 'policies: [marmalade-examples.timed-mint-policy-v1] } ALWAYS-TRUE),
    "timed_mint_spec": {
        'max-supply: 0.0,
        'mint-start-time: (to-timestamp (time "2023-07-09T12:00:00Z")),
        'mint-end-time: (to-timestamp (time "2023-07-06T12:00:00Z")) } } )

  (expect-failure "Fail if end date is before the start date"
      "Mint end time must be after mint start time"
      (create-token (read-msg 'token-id) 0 "timed-mint-policy-v1-0" [marmalade-examples.timed-mint-policy-v1] ALWAYS-TRUE))

  ; validate max-supply
  (env-data {
    "token-id": (create-token-id { 'uri: "timed-mint-policy-v1-0", 'precision: 0, 'policies: [marmalade-examples.timed-mint-policy-v1] } ALWAYS-TRUE),
    "timed_mint_spec": {
        'max-supply: -1.0,
        'mint-start-time: (to-timestamp (time "2023-07-09T12:00:00Z")),
        'mint-end-time: (to-timestamp (time "2023-07-10T12:00:00Z")) } } )

  (expect-failure "Fail if max-supply is negative"
      "Max supply must be non-negative"
      (create-token (read-msg 'token-id) 0 "timed-mint-policy-v1-0" [marmalade-examples.timed-mint-policy-v1] ALWAYS-TRUE))

  ; create token
  (env-data {
    "token-id": (create-token-id { 'uri: "timed-mint-policy-v1-0", 'precision: 0, 'policies: [marmalade-examples.timed-mint-policy-v1] } ALWAYS-TRUE),
    "timed_mint_spec": {
        'max-supply: 1.0,
        'mint-start-time: (to-timestamp (time "2023-07-09T12:00:00Z")),
        'mint-end-time: (to-timestamp (time "2023-07-10T12:00:00Z")) } } )

  (expect "create a token with timed mint policy"
    true
    (create-token (read-msg 'token-id) 0 "timed-mint-policy-v1-0" [marmalade-examples.timed-mint-policy-v1] ALWAYS-TRUE))


  (expect "create-token events"
    [ {"name": "marmalade-v2.ledger.TOKEN","params": [(read-msg 'token-id) 0 [marmalade-examples.timed-mint-policy-v1] "timed-mint-policy-v1-0" ALWAYS-TRUE]} ]
    (map (remove "module-hash")  (env-events true)))

(commit-tx)


(begin-tx "mint")

  (use marmalade-v2.ledger)
  (use marmalade-v2.policy-manager)
  (use marmalade-examples.timed-mint-policy-v1)
  (use marmalade-v2.util-v1)
  (use mini-guard-utils)
  
  (env-data {
    "token-id": (create-token-id { 'uri: "timed-mint-policy-v1-0", 'precision: 0, 'policies: [marmalade-examples.timed-mint-policy-v1] } ALWAYS-TRUE)
    ,"account": "k:e4c6807d79d8bf4695e10e5678ebf72862f59b71f971d39dd3349f4beeacd6e3"
    ,"account-guard": {"keys": ["e4c6807d79d8bf4695e10e5678ebf72862f59b71f971d39dd3349f4beeacd6e3"], "pred": "keys-all"}
  })

  (env-sigs [
    { 'key: 'account
     ,'caps: [(marmalade-v2.ledger.MINT (read-msg 'token-id) (read-msg 'account) 1.0)]
    }])

  ; mint before start
  (env-chain-data {"block-time": (time "2023-07-08T12:00:00Z")})

  (expect-failure "Fail if mint before start"
    "Mint has not started yet"
    (mint (read-msg 'token-id) (read-msg 'account) (read-keyset 'account-guard ) 1.0))

  ; mint after end
  (env-chain-data {"block-time": (time "2023-07-12T12:00:00Z")})

  (expect-failure "Fail if mint after end"
    "Mint has ended"
    (mint (read-msg 'token-id) (read-msg 'account) (read-keyset 'account-guard ) 1.0))
    
  ; mint before max-supply reached but would reach wit the amount minting
  (env-chain-data {"block-time": (time "2023-07-09T15:00:00Z")})

  (expect-failure "Fail if mint after end"
    "Exceeds max supply"
    (mint (read-msg 'token-id) (read-msg 'account) (read-keyset 'account-guard ) 3.0))

  ; mint successfully
  (env-chain-data {"block-time": (time "2023-07-09T15:00:00Z")})

  (expect "Minted successfully"
    true
    (mint (read-msg 'token-id) (read-msg 'account) (read-keyset 'account-guard ) 1.0))

  (expect "mint events"
    [ {"name": "marmalade-v2.ledger.MINT","params": [(read-msg 'token-id) (read-msg 'account) 1.0]}
      {"name": "marmalade-v2.ledger.ACCOUNT_GUARD","params": [(read-msg 'token-id) (read-msg 'account) (read-keyset 'account-guard)]}
      {"name": "marmalade-v2.ledger.RECONCILE","params": [(read-msg 'token-id) 1.0 {"account": "","current": 0.0,"previous": 0.0} {"account": "k:e4c6807d79d8bf4695e10e5678ebf72862f59b71f971d39dd3349f4beeacd6e3","current": 1.0,"previous": 0.0}]} {"name": "marmalade-v2.ledger.SUPPLY","params": [(read-msg 'token-id) 1.0]}]
    (map (remove "module-hash")  (env-events true)))

  ; ensure only one mint per account
  (env-chain-data {"block-time": (time "2023-07-09T15:00:00Z")})

  (expect-failure "Fail if account had already minted"
    "Account has already minted"
    (mint (read-msg 'token-id) (read-msg 'account) (read-keyset 'account-guard ) 1.0))
    
  ; mint after max-supply reached
  (env-chain-data {"block-time": (time "2023-07-09T15:00:00Z")})
  (env-data {
    "token-id": (create-token-id { 'uri: "timed-mint-policy-v1-0", 'precision: 0, 'policies: [marmalade-examples.timed-mint-policy-v1] } ALWAYS-TRUE)
    ,"account": "k:e4c6807d79d8bf4695e10e5678ebf72862f59b71f971d39dd3349f4beeacd6e32"
    ,"account-guard": {"keys": ["e4c6807d79d8bf4695e10e5678ebf72862f59b71f971d39dd3349f4beeacd6e32"], "pred": "keys-all"}
  })
  (env-sigs [
    { 'key: 'account
     ,'caps: [(marmalade-v2.ledger.MINT (read-msg 'token-id) (read-msg 'account) 1.0)]
    }])

  (expect-failure "Fail if mint has reached max supply"
    "Mint has reached max supply"
    (mint (read-msg 'token-id) (read-msg 'account) (read-keyset 'account-guard ) 1.0))

(commit-tx)


(begin-tx "fail transfer")

  (use marmalade-v2.ledger)
  (use marmalade-v2.policy-manager)
  (use marmalade-examples.timed-mint-policy-v1)
  (use marmalade-v2.util-v1)
  (use mini-guard-utils)

  (env-data {
    "token-id": (create-token-id { 'uri: "timed-mint-policy-v1-0", 'precision: 0, 'policies: [marmalade-examples.timed-mint-policy-v1] } ALWAYS-TRUE)
    ,"account": "k:e4c6807d79d8bf4695e10e5678ebf72862f59b71f971d39dd3349f4beeacd6e3"
    ,"receiver": "k:6778a9153dbfcfb787c9eb1700455a59af62b15008b71f805398d857bddb48f3"
    ,"receiver-guard": {"keys": ["receiver"], "pred": "keys-all"}
    ,"target-chain": "8"
  })

  ; fail transfer
  (expect-failure "Fail to transfer"
    "Transfer prohibited"
    (transfer (read-msg 'token-id) (read-msg 'account) (read-msg 'receiver) 1.0))

  ; fail crosschain transfer
  (expect-failure "Fail to transfer crosschain"
  "cross chain not supported"
  (transfer-crosschain (read-msg 'token-id) (read-msg 'account) (read-msg 'receiver) (read-keyset 'receiver-guard ) (read-msg 'target-chain) 1.0))

(commit-tx)
