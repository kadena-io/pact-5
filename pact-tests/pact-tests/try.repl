(begin-tx)
(module try-module GOVERNANCE

  "Test the try/handle-based control flow primitives"

  (defcap GOVERNANCE ()
    true)

  (defschema test-schema
    test:bool)

  (deftable test-table:{test-schema})

  (defun successful-enforce:bool ()
    (try false (enforce (= "emily" "emily") "failure")))

  (defun failed-enforce:bool ()
    (try false (enforce (= "will" "stuart") "failure")))

  (defun failed-complex-enforce:string ()
    (try "default" (let ((r "broken")) (enforce false "will fail") r)))

  (defun failed-expr:decimal ()
    (try 0.0 (/ 1 0)))

  (defun failed-write:string ()
    (try "no writes" (write test-table "emily" { "test" : true })))

  (defun successful-read:bool ()
    (try false (with-read test-table "emily" { "test" := t} t)))

  (defcap ALWAYS_FAIL () false)

  (defun enforce-cap ()
    (enforce-one "does not boom" [(require-capability (ALWAYS_FAIL)) true]))

)
(create-table test-table)

(commit-tx)
(begin-tx)
(use try-module)

;; success case for enforce post-fork
(expect "should return 'true' on successful enforce" true (successful-enforce))

;; failure case for enforce post-fork
(expect "should return 'false' on failed enforce" false (failed-enforce))

;; failure case for slightly more complex enforce post-fork
(expect "should return 'false' on failed enforce" "default" (failed-complex-enforce))

;; failure case for std expression
(expect-failure "return 0.0 on failed division by 0" (failed-expr))

; TODO: instead of expecting here, we should expect failure by
; independently handling impure exceptions
;
;; failure case for writes in pure context
(expect-failure "failure on attempting to write to the db" (failed-write))

;; failure case for reads in pure context
(insert test-table "emily" { "test" : true })
(expect "failure when on attempting to reads from the db" true (successful-read))

;; require-cap works in enforce-one post-fork
(expect "require-cap works sin enforce-one" true (enforce-cap))
(commit-tx)

; read-* functions made recoverable
(begin-tx)

(env-data {})
(expect "read-integer fails on non-existent key but is recoverable" 1 (try 1 (read-integer "somekey")))
(expect "read-string fails on non-existent key but is recoverable" 1 (try 1 (read-string "somekey")))
(expect "read-keyset fails on non-existent key but is recoverable" 1 (try 1 (read-keyset "somekey")))
(expect "read-decimal fails on non-existent key but is recoverable" 1 (try 1 (read-decimal "somekey")))
(expect "read-msg fails on non-existent key but is recoverable" 1 (try 1 (read-msg "somekey")))
(commit-tx)

