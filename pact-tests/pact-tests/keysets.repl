(begin-tx)
;;
;; keyset formats
;;

(env-exec-config ["EnforceKeyFormats"])
(env-data
 { 'bad: ['foo]
 , 'short: ["12440d374865bdf0a3349634a70d1317fc279e7e13db98f2199ac5e7378975"]
 , 'long: ["12440d374865bdf0a3349634a70d1317fc279e7e13db98f2199ac5e7378975eaea"]
 , 'badchars: ["x2440d374865bdf0a3349634a70 1317fc279e7e13db9!f2199ac5e7378975ea"]
 , 'ucase:  ["12440D374865BDF0A3349634A70D1317FC279E7E13DB98F2199AC5E7378975EA"]
 , 'good:  ["12440d374865bdf0a3349634a70d1317fc279e7e13db98f2199ac5e7378975ea"]
 , 'mixed: ['foo "12440d374865bdf0a3349634a70d1317fc279e7e13db98f2199ac5e7378975ea"]
 , 'good2: ["12440d374865bdf0a3349634a70d1317fc279e7e13db98f2199ac5e7378975ea"
            "fdd198807260fa07b86f97a918ff7fe3542d98b9ca41a76f509e886dba3ae177"]

 })
(expect-failure
 "enforce kadena key format with flag: fail single"
 "Invalid keyset"
 (read-keyset 'bad))
(expect-failure
 "enforce kadena key format with flag: fail short"
 "Invalid keyset"
 (read-keyset 'short))
(expect-failure
 "enforce kadena key format with flag: fail long"
 "Invalid keyset"
 (read-keyset 'long))
(expect-failure
 "enforce kadena key format with flag: fail badchars"
 "Invalid keyset"
 (read-keyset 'badchars))
(expect-failure
 "enforce kadena key format with flag: fail uppercase"
 "Invalid keyset"
 (read-keyset 'ucase))

(expect-failure
 "enforce kadena key format with flag: fail one bad one good"
 "Invalid keyset"
 (read-keyset 'mixed))
(expect-that
 "enforce kadena key format with flag: success single"
 (constantly true)
 (read-keyset 'good))
(expect-that
 "enforce kadena key format with flag: success 2"
 (constantly true)
 (read-keyset 'good2))

(commit-tx)

(begin-tx)
;;
;; namespaced keysets
;;
(env-exec-config ["RequireKeysetNs"])

(env-data
  { "alice-keys" : ["alice"]
  , "bob-keys"   : ["bob"]
  , "alice.alice-keys": ["alice"]
  , "bob.bob-keys" : ["bob"]
  })

(env-keys ["alice", "bob"])

; Define namespace using a keyset guard
(define-namespace 'alice
  (read-keyset 'alice-keys)
  (read-keyset 'alice-keys))

(define-namespace 'bob
  (read-keyset 'bob-keys)
  (read-keyset 'bob-keys))

(expect-failure
  "Defining un-namespaced keys fails - env keys, name failure"
  "Cannot define keyset outside of a namespace"
  (define-keyset 'alice-keys))

;; Show failure on lookup for keys
(expect-failure
  "Defining un-namespaced keys fails - actual keys, name failure"
  "Cannot define keyset outside of a namespace"
  (define-keyset 'alice (read-keyset 'alice-keys)))

(expect-failure
  "Defining namespaced key fails - env keys, outside namespace"
  "Cannot define keyset outside of a namespace"
  (define-keyset "alice.alice-keys"))

(namespace 'alice)
(expect
  "Defining namespaced key succeeds - env keys, in namespace"
  "Keyset write success"
  (define-keyset "alice.alice-keys"))

(expect-failure
  "Defining namespaced key fails - env keys, in wrong namespace"
  (define-keyset "bob.bob-keys"))

(define-keyset "alice.alice-keys")
(expect
  "Rotating keyset within namespace succeeds"
  "Keyset write success"
  (define-keyset "alice.alice-keys" (read-keyset 'bob-keys)))

(namespace 'bob)

(expect
  "Rotating keyset in wrong namespace succeeds if keys are present"
  "Keyset write success"
  (define-keyset "alice.alice-keys" (read-keyset 'bob-keys)))

(commit-tx)

(begin-tx)

(env-data
  { "TEST <2>." : ["test"]
  , "" : ["test"]
  })
(env-keys ["test"])

;; clear env - post fork
(env-exec-config ["RequireKeysetNs"])

(expect-failure
  "keyset definition parsing is not permissive post-pact-4.4 - define-keyset"
  "Cannot define keyset outside"
  (define-keyset "TEST <2>."))

(expect-failure
  "keyset definition parsing is permissive post-pact-4.4 - enforce-guard - keyset ref"
  (enforce-guard (keyset-ref-guard "TEST <2>.")))

(namespace 'alice)
(expect-failure
  "keyset name format is not permissive post-pact-4.4 - empty-keyset - define-keyset"
  "Invalid keyset name format"
  (define-keyset ""))

(expect-failure
  "keyset name format is not permissive post-pact-4.4 - empty-keyset - enforce-keyset"
  "Invalid keyset name format"
  (enforce-keyset ""))

(expect-failure
  "keyset name format is not permissive post-pact-4.4 - empty keyset - enforce-guard - keyset ref"
  "Invalid keyset name format"
  (enforce-guard (keyset-ref-guard "")))

;; admin/user guard differentiation in keyset

(commit-tx)

(begin-tx)
(module keyset-custom-pred g
  (defcap g () true)

  (defun custom-pred:bool (count:integer matched:integer) (>= matched count) )
  )
(env-data {"ks":{"keys":["jose"],"pred":"="}})
(env-sigs [{"key":"jose", "caps":[]}])
(expect "keyset enforce suceeds with = as a pred" true (enforce-guard (read-keyset "ks")))

(env-data {"ks":{"keys":["jose"],"pred":"keyset-custom-pred.custom-pred"}})
(expect "keyset enforce suceeds with custom pred as a pred" true (enforce-guard (read-keyset "ks")))

; Keyset with multiple keys, as a litmus test
(env-data {"ks":{"keys":["jose", "robert"],"pred":"="}})
(env-sigs [{"key":"jose", "caps":[]}])

(expect-failure "keyset enforce should fail with pred = for two keys" (enforce-guard (read-keyset "ks")))
(env-data {"ks":{"keys":["jose", "robert"],"pred":"keyset-custom-pred.custom-pred"}})
(expect-failure "keyset enforce should fail with custom pred for two keys" (enforce-guard (read-keyset "ks")))

(env-sigs [{"key":"jose", "caps":[]}, {"key":"robert", "caps":[]}])
(expect "keyset enforce should work with pred = for two keys" true (enforce-guard (read-keyset "ks")))
(commit-tx)

(begin-tx)
(env-data {"ks":{"keys":["jose", "robert"],"pred":"="}})
; We can do this since we're call by value :)
; also: pre-running the json parser may already yield guard values
(env-data {"ks":(read-keyset "ks")})
(expect "keyset read works with keyset values" true (enforce-guard (read-keyset "ks")))

(commit-tx)
