(begin-tx)
(define-keyset 'k (sig-keyset))

(module leftpad 'k
  (defconst VERSION 1)
  (defun left-pad (s i)
    (+ (fold (+) "" (make-list i " ")) s)))

(module impure 'k
  (defconst VERSION 1)
  (defschema foo-schema value:integer)
  (deftable foo:{foo-schema})
  (defun ins (k v) (insert foo k v)))

(create-table foo)

(commit-tx)

(begin-tx)

(use leftpad)
(use impure)

(module dep 'k
  (defun dep-leftpad () (left-pad "hello" 3))
  (defun dep-impure (k v) (ins k { "value": v })))

(commit-tx)

(begin-tx)

(expect "leftpad works" "   hello" (dep.dep-leftpad))
(dep.dep-impure "a" 1)
(expect "impure works" { "value": 1 } (read impure.foo "a"))

(rollback-tx)

(begin-tx)

(module leftpad 'k
  (defconst VERSION 2)
  (defun left-pad (s i)
    (+ (fold (+) "" (make-list i " ")) s)))

(module impure 'k
  (defconst VERSION 2)
  (defschema foo-schema value:integer)
  (deftable foo:{foo-schema})
  (defun ins (k v) (insert foo k v)))

(commit-tx)

(begin-tx)

(expect "leftpad works after update" "   hello" (dep.dep-leftpad))
(expect-failure "impure fails after update" (dep.dep-impure "b" 1))

(rollback-tx)

(begin-tx)

(use dep)

(module impure 'k
  (defconst VERSION 3)
  (bless "uJfYhiwPtPfljhFw_y-4F3kNS1eWmY7Y-h8soX6pM_Q")
  (defschema foo-schema value:integer)
  (deftable foo:{foo-schema})
  (defun ins (k v) (insert foo k v)))

(commit-tx)

(dep.dep-impure "b" 1)
(expect "impure works with blessed hash" { "value": 1 } (read impure.foo "b"))
